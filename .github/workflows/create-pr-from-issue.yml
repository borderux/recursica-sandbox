name: Create PR from Issue

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  issues: write

# Allow concurrent deployments for different PRs
concurrency:
  group: 'pages-issue-${{ github.event.issue.number }}'
  cancel-in-progress: true

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;

            // Extract JSON data from issue body
            const jsonMatch = issue.body.match(/```json\s*([\s\S]*?)\s*```/);
            let changeData = null;

            if (jsonMatch) {
              try {
                changeData = JSON.parse(jsonMatch[1]);
                console.log('Extracted change data:', changeData);
              } catch (error) {
                console.error('Failed to parse JSON from issue body:', error);
              }
            }

            // Create a new branch name based on the issue number
            const branchName = `issue-${issue.number}`;

            // Get the latest commit from the main branch
            const mainBranch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main'
            });

            // Create the branch
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: mainBranch.data.commit.sha
            });

            // If we have change data, create the JSON file
            if (changeData) {
              const filePath = `change-requests/change-issue-${issue.number}.json`;
              const fileContent = JSON.stringify(changeData, null, 2);
              
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filePath,
                message: `Add change request file for issue #${issue.number}`,
                content: Buffer.from(fileContent).toString('base64'),
                branch: branchName
              });
              
              console.log(`Created change request file: ${filePath}`);
            }

            // Create the pull request
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issue.title,
              body: `${issue.body}\n\nCloses #${issue.number}`,
              head: branchName,
              base: 'main'
            });

            // Add a comment to the issue linking to the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `PR created: #${pr.data.number}`
            });

            console.log(`Created PR #${pr.data.number} for issue #${issue.number}`);

            // Store PR number for later use
            core.setOutput('pr-number', pr.data.number);

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Comment on issue about PR creation
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.create-pr.outputs.pr-number }};
            const prUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${prNumber}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `ðŸŽ‰ Pull Request created!\n\nPR #${prNumber} has been created and will automatically deploy a preview once the PR preview workflow runs.\n\nView the PR here: ${prUrl}`
            });
