name: Create PR from Issue

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  create-pr-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            
            // Create a new branch name based on the issue number
            const branchName = `issue-${issue.number}`;
            
            // Get the latest commit from the main branch
            const mainBranch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main'
            });
            
            // Create the branch
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: mainBranch.data.commit.sha
            });
            
            // Create an initial commit on the new branch to make it different from main
            const commit = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: `Initial commit for issue #${issue.number}`,
              tree: mainBranch.data.commit.commit.tree.sha,
              parents: [mainBranch.data.commit.sha]
            });
            
            // Update the branch to point to the new commit
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${branchName}`,
              sha: commit.data.sha
            });
            
            // Create the pull request
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issue.title,
              body: issue.body || `Closes #${issue.number}`,
              head: branchName,
              base: 'main'
            });
            
            // Add a comment to the issue linking to the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `PR created: #${pr.data.number}`
            });
            
            console.log(`Created PR #${pr.data.number} for issue #${issue.number}`);
            
            // Store PR number for later use
            core.setOutput('pr-number', pr.data.number);
      
      - name: Build Storybook
        run: npm run build-storybook
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Prepare PR preview deployment
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Create PR-specific directory structure
          mkdir -p deployment/pr-preview
          
          # Copy the latest Storybook build to PR preview
          if [ -d "builds" ]; then
            # Get the most recent build (last modified)
            LATEST_BUILD=$(ls -t builds/ | head -1)
            if [ -n "$LATEST_BUILD" ]; then
              echo "Using latest build: $LATEST_BUILD"
              cp -r builds/$LATEST_BUILD/* deployment/pr-preview/
            else
              echo "No builds found"
              exit 1
            fi
          else
            echo "No builds directory found"
            exit 1
          fi
          
          # Create a redirect from root to PR preview
          echo '<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0;url=./pr-preview/"></head><body>Redirecting to <a href="./pr-preview/">PR Preview</a></body></html>' > deployment/index.html
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './deployment'
      
      - name: Deploy to GitHub Pages
        environment:
          name: github-pages
          url: ${{ steps.deployment.outputs.page_url }}
        run: |
          echo "Deploying PR preview to GitHub Pages..."
      
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.create-pr.outputs.pr-number }};
            const previewUrl = 'https://borderux.github.io/recursica-sandbox/pr-preview/';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `ðŸŽ‰ PR Preview deployed!\n\nView your Storybook preview here: ${previewUrl}`
            });
